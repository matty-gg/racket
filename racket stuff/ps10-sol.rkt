;Problem set 10
(define (s x) (number->string x))
;problem 1
(define (make-clock hours minutes)
  (let* ((timeh hours)
        (timem minutes)
        (stimeh (s timeh))
        (stimem (s timem)))
  (define (tick)
      (cond ((< timem 59)
                  (set! timem (+ 1 timem)))
                 (else
                  (set! timeh (+ 1 timeh))
                  (set! timem 0))      
                 ))
   (define (time)
     (let ((ntimeh (- 12 (- 24 timeh))))
     (cond ((< timeh 12)
            (cond ((< timem 10)
           (string-append (s timeh) ":0" (s timem) " AM" "\n"))
           (else
            (string-append (s timeh) ":" (s timem) " AM" "\n"))))
           ((and (= timeh 24) (>= timem 0))
            (string-append (s ntimeh) ":0" (s timem) " AM" "\n"))
           (else (cond ((< timem 10)
                 (string-append (s ntimeh) ":0" (s timem) " PM" "\n"))
                 (else
                  (string-append (s ntimeh) ":" (s timem) " PM" "\n") ))))))
    (define (military)
      (let ((timehour 0))
      (set! timehour (- 24 (- 12 timeh)))
      (if (< timeh 12)
      (cond ((< timem 10)
            (string-append (s timeh) ":0" (s timem) "\n" ))
            ((= timem 60)
             (set! timem 0)
             (set! timehour (+ timeh 1))
             (string-append (s timehour) ":0" (s timem) "\n" ))
            (else (string-append (s timeh) ":" (s timem) "\n")))
      (cond ((= timeh 24)
             (cond ((< timem 10)
                    (string-append "00" ":0" (s timem) "\n" ))
                   (else
                    (string-append "00" ":" (s timem) "\n" ))))
        ((< timem 10)
            (string-append (s timeh) ":0" (s timem) "\n"))
            ((= timem 60)
             (set! timem 0)
             (set! timeh (+ timeh 1))
             (string-append (s timeh) ":0" (s timem) "\n" ))
            (else (string-append (s timeh) ":" (s timem) "\n" ))
       ))))             
    (lambda (method)
      (cond ((eq? method 'tick) tick)
            ((eq? method 'time) time)
            ((eq? method 'military) military)))))
(define clock (make-clock 10 59))
((clock 'time))
((clock 'military))
((clock 'tick))
((clock 'time))
((clock 'military))
((clock 'tick))
((clock 'time))
((clock 'military))

(define (make-stack)
(let ((stack '())) ;; internal stack variables
(define (empty?) (null? stack)) ;; stack methods
(define (push x) (set! stack (cons x stack)))
(define (pop) (let ((top (car stack)))
                    (begin (set! stack (cdr stack))
                           top)))
(define (top) (car stack))
(lambda (method)
  (cond ((eq? method 'empty?) empty?)
        ((eq? method 'push) push)
        ((eq? method 'pop) pop)
        ((eq? method 'top) top)
        ))))
(define (eval-postfix p)
  (let ((stack p))
    (define (push x) (set! stack (cons x stack)))
(define (pop) (let ((top (car stack)))
                    (begin (set! stack (cdr stack))
                           top)))
(define (top) (car stack))
(define (add)
  (push (car p))
  (push (cdr p))
  (+ (car p) (cadr p)))
(lambda (method)
  (cond ((eq? method '/#+) add)))))
(eval-postfix (list 23 15 (symbol->string '+)))

                        
        